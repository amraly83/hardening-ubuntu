#!/bin/bash
# Main validation script for hardening measures
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common.sh"

main() {
    local username="$1"
    local success=true
    local total_checks=0
    local passed_checks=0

    log "INFO" "Starting comprehensive validation suite..."

    # Array of validation scripts and their descriptions
    declare -A validations=(
        ["verify-system.sh"]="Base system security"
        ["verify-deployment.sh"]="Deployment configuration"
        ["verify-admin-setup.sh"]="Admin user setup"
        ["verify-2fa.sh"]="2FA configuration"
        ["verify-sudo.sh"]="Sudo access"
    )

    # Run each validation
    for script in "${!validations[@]}"; do
        ((total_checks++))
        echo "=== Running ${validations[$script]} validation ==="
        
        if [[ -x "${SCRIPT_DIR}/${script}" ]]; then
            if timeout 300 "${SCRIPT_DIR}/${script}" "$username"; then
                log "SUCCESS" "${validations[$script]} validation passed"
                ((passed_checks++))
            else
                log "ERROR" "${validations[$script]} validation failed"
                success=false
            fi
        else
            log "ERROR" "Validation script ${script} not found or not executable"
            success=false
        fi
        
        echo "----------------------------------------"
    done

    # Generate validation report
    generate_report "$username" "$success" "$passed_checks" "$total_checks"

    if [[ "$success" == "true" ]]; then
        log "SUCCESS" "All validations completed successfully ($passed_checks/$total_checks checks passed)"
        return 0
    else
        log "ERROR" "Some validations failed (only $passed_checks/$total_checks checks passed)"
        return 1
    fi
}

generate_report() {
    local username="$1"
    local success="$2"
    local passed="$3"
    local total="$4"
    local report_file="/var/log/hardening-validation-report.txt"
    local date_stamp=$(date '+%Y-%m-%d %H:%M:%S')

    {
        echo "=== Security Hardening Validation Report ==="
        echo "Date: $date_stamp"
        echo "Username: $username"
        echo "Overall Status: $([ "$success" == "true" ] && echo "PASSED" || echo "FAILED")"
        echo "Checks Passed: $passed/$total"
        echo
        echo "=== System Information ==="
        echo "Ubuntu Version: $(lsb_release -d 2>/dev/null | cut -f2)"
        echo "Kernel Version: $(uname -r)"
        echo
        echo "=== Service Status ==="
        systemctl is-active --quiet sshd && echo "SSH: Running" || echo "SSH: Not Running"
        systemctl is-active --quiet fail2ban && echo "Fail2ban: Running" || echo "Fail2ban: Not Running"
        systemctl is-active --quiet ufw && echo "UFW: Running" || echo "UFW: Not Running"
        echo
        echo "=== Security Configurations ==="
        echo "SSH Port: $(grep "^Port" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')"
        echo "2FA Enabled: $(grep -q "auth required pam_google_authenticator.so" /etc/pam.d/sshd 2>/dev/null && echo "Yes" || echo "No")"
        echo "Password Auth: $(grep "^PasswordAuthentication" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')"
        echo "Root Login: $(grep "^PermitRootLogin" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')"
        echo
        echo "=== Firewall Rules ==="
        ufw status verbose
        echo
        echo "=== System Hardening ==="
        echo "Automatic Updates: $(systemctl is-active --quiet unattended-upgrades && echo "Enabled" || echo "Disabled")"
        echo "IPv6: $(grep "^net.ipv6.conf.all.disable_ipv6" /etc/sysctl.d/99-security.conf 2>/dev/null | awk '{print $3}')"
        echo
        echo "=== Recommendations ==="
        if [[ "$success" != "true" ]]; then
            echo "1. Review failed validation logs"
            echo "2. Check service configurations"
            echo "3. Verify user permissions"
            echo "4. Run individual verification scripts"
        else
            echo "1. Regularly monitor auth.log"
            echo "2. Keep system updated"
            echo "3. Review firewall rules periodically"
            echo "4. Test backup authentication methods"
        fi
        echo
        echo "Report generated by validation suite v1.0"
        echo "=== End of Report ==="
    } > "$report_file"

    chmod 600 "$report_file"
    log "INFO" "Validation report generated at $report_file"
}

# Run main function with proper error handling
if [[ $# -lt 1 ]]; then
    echo "Usage: $0 username"
    exit 1
fi

main "$@"